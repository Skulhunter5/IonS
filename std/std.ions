#ifndef STD_LIB
#define STD_LIB

#macro SYS_read 0
#macro SYS_write 1
#macro SYS_fstat 5
#macro SYS_brk 12
#macro SYS_openat 257

#macro STDIN 0
#macro STDOUT 1
#macro STDERR 2

#macro O_RDONLY 0
#macro O_WRONLY 1
#macro O_RDWR 2
#macro O_CREAT 0100
#macro O_EXCL 0200
#macro O_NOCTTY 0400
#macro O_TRUNC 01000
#macro O_APPEND 02000

#macro AT_FDCWD { 0 100 - }

#macro MAP_PRIVATE 0x02
#macro MAP_ANONYMOUS 0x20

#macro PROT_READ 0x1
#macro PROT_WRITE 0x2
#macro PROT_EXEC 0x4

inline proc fputs ( uint64 ptr uint64 -- uint64 ) {
    SYS_write syscall3
}

inline proc fstat ( ptr uint64 -- uint64 ) {
    SYS_fstat syscall2
}

inline proc brk ( ptr -- ptr ) {
    SYS_brk syscall1
}

inline proc openat ( uint64 ptr uint64 uint64 -- uint64 ) {
    SYS_openat syscall4
}

inline proc puts ( uint64 ptr ) {
    STDOUT fputs drop
}

inline proc eputs ( uint64 ptr ) {
    STDERR fputs drop
}

inline proc putc ( ptr ) {
    1 swap puts
}

proc putb ( bool ) {
    if "true"
    else "false"
    puts
}

inline proc ptr. ( ptr ) {
    cast(uint64) .
}
inline proc bool. ( bool ) {
    cast(uint64) .
}

inline proc ptr== ( ptr ptr -- bool ) {
    cast ( uint64 uint64 ) ==
}

inline proc !ptr ( ptr ptr ) {
    cast ( uint64 ptr ) !64
}
inline proc @ptr ( ptr -- ptr ) {
    @64 cast(ptr)
}

inline proc ptr+ ( ptr uint64 -- ptr ) {
    cast ( uint64 uint64 ) + cast(ptr)
}
inline proc ptr+ ( ptr ptr -- ptr ) {
    cast ( uint64 uint64 ) + cast(ptr)
}

proc !Str ( uint64 ptr ptr ) {
    rot over !64
    cast(uint64) 8 + cast(ptr)
    swap cast(uint64) swap !64
}
proc @Str ( ptr -- uint64 ptr ) {
    dup @64
    swap
    cast(uint64) 8 + cast(ptr) @64
}

proc cstrlen ( ptr -- uint64 ) {
    cast(uint64)
	dup
	while { dup cast(ptr) @8 cast(bool) } do {
        ++
    }
	swap -
}

inline proc cstr-to-str ( ptr -- uint64 ptr ) {
    dup cstrlen swap
}

inline proc cputs ( ptr ) {
	dup cstrlen swap puts
}

inline proc clamp ( uint64 uint64 uint64 -- uint64 ) {
    rot min max
}

inline proc inc8 ( ptr ) {
	dup @8 ++ swap !8
}
inline proc dec8 ( ptr ) {
	dup @8 -- swap !8
}
inline proc inc16 ( ptr ) {
	dup @16 ++ swap !16
}
inline proc dec16 ( ptr ) {
	dup @16 -- swap !16
}
inline proc inc32 ( ptr ) {
	dup @32 ++ swap !32
}
inline proc dec32 ( ptr ) {
	dup @32 -- swap !32
}
inline proc inc64 ( ptr ) {
	dup @64 ++ swap !64
}
inline proc dec64 ( ptr ) {
	dup @64 -- swap !64
}

proc streq ( uint64 ptr uint64 ptr -- bool ) {
    let ( n s1 m s2 ) {
        n m != if { false return }

        n 0 == if { true return }

        0 while { dup n < } do {
            s1 cast(uint64) over + cast(ptr) @8
            swap
            s2 cast(uint64) over + cast(ptr) @8
            rot
            != if { drop false return }
            ++
        } drop
    }
    true
}

proc cstreq ( ptr ptr -- bool ) {
	dup cstrlen swap rot dup cstrlen swap streq
}

proc isAlpha ( uint64 -- bool ) {
    dup 65 < swap
    dup 122 > rot || swap
    dup 90 > swap
    97 <
    && || not
}

proc isDigit ( uint64 -- bool ) {
    dup 48 < swap
    57 >
    || not
}

proc isAlnum ( uint64 -- bool ) {
    dup isAlpha swap
    isDigit
    ||
}

proc str-startswith ( uint64 ptr uint64 ptr -- bool ) {
    swap 2swap rrot
    2dup > if {
        2drop 2drop
        false return
    }
    drop dup rot 2swap swap
    streq
}

proc str-endswith ( uint64 ptr uint64 ptr -- bool ) {
    swap 2swap rrot
    2dup > if {
        2drop 2drop
        false return
    }
    over - rot cast(uint64) +
    over swap 2swap swap
    cast ( _ ptr _ ptr )
    streq
}

proc try-parse-uint64 ( uint64 ptr ptr -- bool ) { // TODO: fix it going over the maximum uint64 value
    rrot swap
    dup 20 > if {
        2drop drop
        false return
    }
    rot 0 over !64
    rrot
    0 while { 2dup > } do {
        2swap swap dup @64 10 * over !64
        swap 2swap
        rot 2dup cast ( uint64 uint64 ) + cast(ptr) @8
        dup isDigit not if {
            2drop 2drop drop
            false return
        }
        48 - rot5 dup @64 rot + over !64
        swap 2swap
        ++
    }
    2drop 2drop
    true return
}

proc memcpy8 ( ptr ptr uint64 ) {
    rrot swap rot
    0 while { 2dup > } do {
        rot 2dup cast(uint64) +
        rot rot5 2dup cast(uint64) + cast(ptr) @8
        2swap rrot cast(ptr) !8
        2swap rrot swap
        ++
    }
    2drop 2drop
}

proc memcpy16 ( ptr ptr uint64 ) {
    rrot swap rot
    0 while { 2dup > } do {
        rot 2dup cast(uint64) +
        rot rot5 2dup cast(uint64) + cast(ptr) @16
        2swap rrot cast(ptr) !16
        2swap rrot swap
        2 +
    }
    2drop 2drop
}

proc memcpy32 ( ptr ptr uint64 ) {
    rrot swap rot
    0 while { 2dup > } do {
        rot 2dup cast(uint64) +
        rot rot5 2dup cast(uint64) + cast(ptr) @32
        2swap rrot cast(ptr) !32
        2swap rrot swap
        4 +
    }
    2drop 2drop
}

proc memcpy64 ( ptr ptr uint64 ) {
    rrot swap rot
    0 while { 2dup > } do {
        rot 2dup cast(uint64) +
        rot rot5 2dup cast(uint64) + cast(ptr) @64
        2swap rrot cast(ptr) !64
        2swap rrot swap
        8 +
    }
    2drop 2drop
}

proc memcpy ( ptr ptr uint64 ) {
    cast ( uint64 uint64 _ )
    8 /% swap 8 *
    swap over
    ctt5 ctt5
    rrot over +
    rrot +
    cast ( ptr ptr _ _ ptr ptr )
    rot memcpy8
    memcpy64
}

proc strcat ( uint64 ptr uint64 ptr ptr -- uint64 ptr ) {
    ctt4 over ctt7 memcpy
    2dup cast(uint64) ctt7 + cast(ptr) ctt5 memcpy
    rrot5 drop swap drop + swap
}

#endif
