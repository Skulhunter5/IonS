#ifndef STD_LIB
#define STD_LIB

#macro SYS_read 0
#macro SYS_write 1
#macro SYS_fstat 5
#macro SYS_brk 12
#macro SYS_openat 257

#macro STDIN 0
#macro STDOUT 1
#macro STDERR 2

#macro O_RDONLY 0
#macro O_WRONLY 1
#macro O_RDWR 2
#macro O_CREAT 0100
#macro O_EXCL 0200
#macro O_NOCTTY 0400
#macro O_TRUNC 01000
#macro O_APPEND 02000

#macro AT_FDCWD { 0 100 - }

#macro MAP_PRIVATE 0x02
#macro MAP_ANONYMOUS 0x20

#macro PROT_READ 0x1
#macro PROT_WRITE 0x2
#macro PROT_EXEC 0x4

inline function fputs ( uint64 ptr uint64 -- uint64 ) {
    SYS_write syscall3
}

inline function fstat ( ptr uint64 -- uint64 ) {
    SYS_fstat syscall2
}

inline function brk ( ptr -- ptr ) {
    SYS_brk syscall1
}

inline function openat ( uint64 ptr uint64 uint64 -- uint64 ) {
    SYS_openat syscall4
}

inline function puts ( uint64 ptr ) {
    STDOUT fputs(3) drop
}

inline function eputs ( uint64 ptr ) {
    STDERR fputs(3) drop
}

inline function putc ( ptr ) {
    1 swap puts(2)
}

function putb ( bool ) {
    if "true"
    else "false"
    puts(2)
}

inline function ptr. ( ptr ) {
    cast(uint64) .
}
inline function bool. ( bool ) {
    cast(uint64) .
}

inline function ptr== ( ptr ptr -- bool ) {
    cast ( uint64 uint64 ) ==
}

inline function !ptr ( ptr ptr ) {
    cast ( uint64 ptr ) !64
}
inline function @ptr ( ptr -- ptr ) {
    @64 cast(ptr)
}

inline function ptr+ ( ptr uint64 -- ptr ) {
    cast ( uint64 uint64 ) + cast(ptr)
}
inline function ptr+ ( ptr ptr -- ptr ) {
    cast ( uint64 uint64 ) + cast(ptr)
}
inline function ptr+ ( uint64 ptr -- ptr ) {
    cast ( uint64 uint64 ) + cast(ptr)
}

function !Str ( uint64 ptr ptr ) {
    rot over !64
    cast(uint64) 8 + cast(ptr)
    swap cast(uint64) swap !64
}
function @Str ( ptr -- uint64 ptr ) {
    dup @64
    swap
    cast(uint64) 8 + cast(ptr) @64
}

function cstrlen ( ptr -- uint64 ) {
    cast(uint64)
	dup
	while { dup cast(ptr) @8 cast(bool) } do {
        ++
    }
	swap -
}

inline function cstr-to-str ( ptr -- uint64 ptr ) {
    dup cstrlen(1) swap
}

inline function cputs ( ptr ) {
	dup cstrlen(1) swap puts(2)
}

inline function clamp ( uint64 uint64 uint64 -- uint64 ) {
    rot min max
}

inline function inc8 ( ptr ) {
	dup @8 ++ swap !8
}
inline function dec8 ( ptr ) {
	dup @8 -- swap !8
}
inline function inc16 ( ptr ) {
	dup @16 ++ swap !16
}
inline function dec16 ( ptr ) {
	dup @16 -- swap !16
}
inline function inc32 ( ptr ) {
	dup @32 ++ swap !32
}
inline function dec32 ( ptr ) {
	dup @32 -- swap !32
}
inline function inc64 ( ptr ) {
	dup @64 ++ swap !64
}
inline function dec64 ( ptr ) {
	dup @64 -- swap !64
}

function streq ( uint64 ptr uint64 ptr -- bool ) {
    let ( n s1 m s2 ) {
        n m != if { false return }

        n 0 == if { true return }

        0 while { dup n < } do {
            s1 cast(uint64) over + cast(ptr) @8
            swap
            s2 cast(uint64) over + cast(ptr) @8
            rot
            != if { drop false return }
            ++
        } drop
    }
    true
}

function cstreq ( ptr ptr -- bool ) {
	dup cstrlen(1) swap rot dup cstrlen(1) swap streq(4)
}

function isAlpha ( uint64 -- bool ) {
    dup 65 < swap
    dup 122 > rot || swap
    dup 90 > swap
    97 <
    && || not
}

function isDigit ( uint64 -- bool ) {
    dup 48 < swap
    57 >
    || not
}

function isAlnum ( uint64 -- bool ) {
    dup isAlpha(1) swap
    isDigit(1)
    ||
}

function str-startswith ( uint64 ptr uint64 ptr -- bool ) {
    swap 2swap rrot
    2dup > if {
        2drop 2drop
        false return
    }
    drop dup rot 2swap swap
    streq(4)
}

function str-endswith ( uint64 ptr uint64 ptr -- bool ) {
    swap 2swap rrot
    2dup > if {
        2drop 2drop
        false return
    }
    over - rot cast(uint64) +
    over swap 2swap swap
    cast ( _ ptr _ ptr )
    streq(4)
}

function try-parse-uint64 ( uint64 ptr ptr -- bool ) { // TODO: fix it going over the maximum uint64 value
    rrot swap
    dup 20 > if {
        2drop drop
        false return
    }
    rot 0 over !64
    rrot
    0 while { 2dup > } do {
        2swap swap dup @64 10 * over !64
        swap 2swap
        rot 2dup cast ( uint64 uint64 ) + cast(ptr) @8
        dup isDigit(1) not if {
            2drop 2drop drop
            false return
        }
        48 - rot5 dup @64 rot + over !64
        swap 2swap
        ++
    }
    2drop 2drop
    true return
}

function memcpy8 ( ptr ptr uint64 ) {
    rrot swap rot
    0 while { 2dup > } do {
        rot 2dup cast(uint64) +
        rot rot5 2dup cast(uint64) + cast(ptr) @8
        2swap rrot cast(ptr) !8
        2swap rrot swap
        ++
    }
    2drop 2drop
}

function memcpy16 ( ptr ptr uint64 ) {
    rrot swap rot
    0 while { 2dup > } do {
        rot 2dup cast(uint64) +
        rot rot5 2dup cast(uint64) + cast(ptr) @16
        2swap rrot cast(ptr) !16
        2swap rrot swap
        2 +
    }
    2drop 2drop
}

function memcpy32 ( ptr ptr uint64 ) {
    rrot swap rot
    0 while { 2dup > } do {
        rot 2dup cast(uint64) +
        rot rot5 2dup cast(uint64) + cast(ptr) @32
        2swap rrot cast(ptr) !32
        2swap rrot swap
        4 +
    }
    2drop 2drop
}

function memcpy64 ( ptr ptr uint64 ) {
    rrot swap rot
    0 while { 2dup > } do {
        rot 2dup cast(uint64) +
        rot rot5 2dup cast(uint64) + cast(ptr) @64
        2swap rrot cast(ptr) !64
        2swap rrot swap
        8 +
    }
    2drop 2drop
}

function memcpy ( ptr ptr uint64 ) {
    cast ( uint64 uint64 _ )
    8 /% swap 8 *
    swap over
    ctt5 ctt5
    rrot over +
    rrot +
    cast ( ptr ptr _ _ ptr ptr )
    rot memcpy8(3)
    memcpy64(3)
}

function strcat ( uint64 ptr uint64 ptr ptr -- uint64 ptr ) {
    ctt4 over ctt7 memcpy(3)
    2dup cast(uint64) ctt7 + cast(ptr) ctt5 memcpy(3)
    rrot5 drop swap drop + swap
}

#endif
