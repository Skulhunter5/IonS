macro SYS_read 0
macro SYS_write 1

macro STDIN 0
macro STDOUT 1

inline proc fputs ( uint64 ptr uint64 -- ) {
    SYS_write syscall3
}

inline proc puts ( uint64 ptr -- ) {
    STDOUT fputs
}

inline proc putc ( ptr -- ) {
    1 swap puts
}

proc cstrlen ( ptr -- uint64 ) {
	dup
	while { dup @8 } do ++
	swap -
}

inline proc cputs ( ptr -- ) {
	dup cstrlen swap puts
}

inline proc clamp ( uint64 uint64 uint64 -- uint64 ) {
    rot min max
}

inline proc inc8 ( ptr -- ) {
	dup @8 ++ swap !8
}
inline proc dec8 ( ptr -- ) {
	dup @8 -- swap !8
}
inline proc inc16 ( ptr -- ) {
	dup @16 ++ swap !16
}
inline proc dec16 ( ptr -- ) {
	dup @16 -- swap !16
}
inline proc inc32 ( ptr -- ) {
	dup @32 ++ swap !32
}
inline proc dec32 ( ptr -- ) {
	dup @32 -- swap !32
}
inline proc inc64 ( ptr -- ) {
	dup @64 ++ swap !64
}
inline proc dec64 ( ptr -- ) {
	dup @64 -- swap !64
}

proc streq ( uint64 ptr uint64 ptr -- bool ) {
	swap 2swap 2rot dup rot
	!= if {
		2drop drop
		0 return
	}
    dup 0 == if {
        2drop drop
        1 return
    }
    0 while { 2dup > } do {
        2swap 2rot 2dup + @8
        2swap 2dup + @8
        2swap 2rot != if {
            2drop 2drop
            0 return
        }
        rot 2swap
        ++
    }
    dup 0 > if {
        2drop 2drop
        1 return
    }
    0
}

proc cstreq ( ptr ptr -- bool ) {
	dup cstrlen swap rot dup cstrlen swap streq
}

proc isAlpha ( uint8 -- bool ) {
    dup 65 < swap
    dup 122 > rot || swap
    dup 90 > swap
    97 <
    && || not
}

proc isDigit ( uint8 -- bool ) {
    dup 48 < swap
    57 >
    || not
}

proc isAlnum ( uint8 -- bool ) {
    dup isAlpha swap
    isDigit
    ||
}

proc str-startswith ( uint64 ptr uint64 ptr -- ) {
    swap 2swap 2rot
    2dup > if {
        2drop 2drop
        0 return
    }
    drop dup rot 2swap swap
    streq
}

proc str-endswith ( uint64 ptr uint64 ptr -- ) {
    swap 2swap 2rot
    2dup > if {
        2drop 2drop
        0 return
    }
    over - rot +
    over swap 2swap swap
    streq
}

proc try-parse-uint64 ( uint64 ptr ptr -- ) { // TODO: fix it not going over the maximum uint64 value
    // len str ptr
    2rot swap
    // ptr str len
    dup 20 > if {
        2drop drop
        0 return
    }
    // ptr str len
    rot 0 over !64
    // str len ptr
    2rot
    // ptr str len
    0 while { 2dup > } do {
        // ptr str len i
        2swap swap dup @64 10 * over !64
        // len i str ptr
        swap 2swap
        // ptr str len i
        rot 2dup + @8
        // ptr len i str str[i]
        dup isDigit not if {
            // ptr len i str str[i]
            2drop 2drop drop
            0 return
        }
        // ptr len i str str[i]
        48 - rot5 dup @64 rot + over !64
        // len i str ptr
        swap 2swap
        // ptr str len i
        ++
    }
    // ptr str len i
    2drop 2drop
    1 return
}

proc memcpy ( ptr ptr uint64 -- ) {
    0 while { 2dup > } do {
        rot 2dup +
        rot rot5 2dup + @8
        2swap 2rot !8
        2swap 2rot swap
        ++
    }
    2drop 2drop
}

proc strcat ( uint64 ptr uint64 ptr ptr -- uint64 ptr ) {
    ctt4 over ctt7 memcpy
    2dup ctt7 + ctt5 memcpy
    2rot5 drop swap drop + swap
}
