#include "./../std/std.ions"

inline function isNegative ( uint64 -- bool ) { // TODO: implement signed numbers and signed comparisons
    0b1000000000000000000000000000000000000000000000000000000000000000 & 0 >
}

struct alloc_info (
    uint64 : flags
    ptr : base
    uint64 : size
)

#macro ENTRY_FREE 0
#macro ENTRY_BEEN_USED 1
#macro ENTRY_IN_USE 2

var alloc_tbl ptr
var next_base ptr
var tbl_entries uint64
var space_left uint64

function alloc ( uint64 -- ptr ) {
    let ( size ) {
        space_left @ size - dup isNegative(1) swap 0 == || if {
            null return
        }
        0 while { dup tbl_entries @ < } do {
            alloc_tbl @ over 24 * ptr+
            dup @alloc_info.flags ENTRY_FREE == if {
                let ( _ alloc_info ) {
                    ENTRY_IN_USE   alloc_info !alloc_info.flags
                    next_base @ alloc_info !alloc_info.base
                    size           alloc_info !alloc_info.size

                    next_base @   size ptr+  next_base !
                    space_left @   size -     space_left !
                    
                    alloc_info @alloc_info.base return
                }
            } else* { dup @alloc_info.flags ENTRY_BEEN_USED == over @alloc_info.size size >= && } if {
                let ( _ alloc_info ) {
                    ENTRY_IN_USE alloc_info !alloc_info.flags

                    alloc_info @alloc_info.base return
                }
            } else drop
            ++
        } drop
        null return
    }
}

function find_entry ( ptr -- ptr ) {
    let ( base ) {
        0 while { dup tbl_entries @ < } do {
            alloc_tbl @ over 24 * ptr+
            dup @alloc_info.base base ptr== if {
                swap drop return
            } else drop
            ++
        } drop
        null return
    }
}

function realloc ( ptr uint64 -- ptr ) {
    let ( base size ) {
        base find_entry(1)

        dup @alloc_info.size size >= if {
            drop base return
        }

        size alloc(1)
        dup null ptr== if {
            2drop null return
        }

        // alloc_info new_base
        let ( alloc_info new_base ) {
                new_base
                alloc_info @alloc_info.base
                alloc_info @alloc_info.size
            memcpy(3)
            ENTRY_BEEN_USED alloc_info !alloc_info.flags
            new_base return
        }
    }
}

function free ( ptr ) {
    find_entry(1) ENTRY_BEEN_USED swap !alloc_info.flags
}

function init_alloc ( ptr uint64 uint64 -- bool ) { // TODO: implement safeguard if n is too large for the given size
    let ( base size n ) {
        n 24 * size > if { false return }
        
        base alloc_tbl !
        n tbl_entries !
        size n 24 * - space_left !
        base n 24 * ptr+ next_base !
    }
    true
}
