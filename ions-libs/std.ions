macro SYS_read 0
macro SYS_write 1

macro STDIN 0
macro STDOUT 1

macro fputs {
  SYS_write syscall3
}

macro puts {
  STDOUT fputs
}

macro cstrlen {
	dup
	while { dup @8 } do {
		1 +
	}
	swap -
}

macro cputs {
	dup cstrlen swap puts
}

macro clamp {
   rot min max
}

macro inc8 {
	dup @8 1 + swap !8
}
macro dec8 {
	dup @8 1 - swap !8
}
macro inc16 {
	dup @16 1 + swap !16
}
macro dec16 {
	dup @16 1 - swap !16
}
macro inc32 {
	dup @32 1 + swap !32
}
macro dec32 {
	dup @32 1 - swap !32
}
macro inc64 {
	dup @64 1 + swap !64
}
macro dec64 {
	dup @64 1 - swap !64
}

proc streq 4-1 {
	swap 2swap 2rot dup rot
	!= if {
		2drop drop
		0 return
	}
    dup 0 == if {
        2drop drop
        1 return
    }
    0 while { 2dup > } do {
        2swap 2rot 2dup + @8
        2swap 2dup + @8
        2swap 2rot != if {
            2drop 2drop
            0 return
        }
        rot 2swap
        1 +
    }
    dup 0 > if {
        2drop 2drop
        1 return
    }
    0
}

proc cstreq 2-1 {
	dup cstrlen swap rot dup cstrlen swap streq
}

proc isAlpha 1-1 {
    dup 65 < swap
    dup 122 > rot || swap
    dup 90 > swap
    97 <
    && || not
}

proc isDigit 1-1 {
    dup 48 < swap
    57 >
    || not
}

proc isAlnum 1-1 {
    dup isAlpha swap
    isDigit
    ||
}

proc str-startswith 4-1 {
    swap 2swap 2rot
    2dup > if {
        2drop 2drop
        0 return
    }
    drop dup rot 2swap swap
    streq
}
